<p style="color: green"><%= notice %></p>

<h1>Vet de guardia</h1>

<div id="vet_de_guardia">
  <% @veterinarias.each do |veterinarias| %>
    <%= render veterinarias %>
    <p>
      <%= link_to "Show this vet de guardium", veterinarias %>
    </p>
  <% end %>
</div>

<%= link_to "New vet de guardium", new_vet_de_guardium_path %>

<style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
    }

    #calendar {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      
    }

    .day {
      border: 1px solid #ddd;
      padding: 10px;
      height: 150px; /* Altura fija para las casillas */
    }

    .events {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .event {
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
      margin-bottom: 5px;
      padding: 10px;
    }

    .con-margen-inferior {
      margin-bottom: 10px; /* Ajusta el valor según sea necesario */
    }
</style>

  <h1>Calendario de Veterinarias</h1>
<!-- """ -->
  <% if user_signed_in? && current_user.tipo_usuario == 'veterinario' %>
    <a href="<%= new_vet_de_guardium_path %>" class="btn btn-turqueza con-margen-inferior">Publicar un perro en adopcion</a>
  <% end %>

  <!-- Fila para los nombres de los días -->
  <div class="row">
    <div class="col day-of-week">Lunes</div>
    <div class="col day-of-week">Martes</div>
    <div class="col day-of-week">Miércoles</div>
    <div class="col day-of-week">Jueves</div>
    <div class="col day-of-week">Viernes</div>
    <div class="col day-of-week">Sábado</div>
    <div class="col day-of-week">Domingo</div>
  </div>

  <!-- Calendario -->
  <div id="calendar" class="row"></div>

<script>
  document.addEventListener('turbo:load', function () {
    const calendarElement = document.getElementById('calendar');
    calendarElement.innerHTML = '';

    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1;
    const currentYear = currentDate.getFullYear();

    const daysInPrevMonth = new Date(currentYear, currentMonth, 0).getDate();
    const firstDay = new Date(currentYear, currentMonth, 1).getDay();
    const adjustedFirstDay = (firstDay === 0) ? 7 : firstDay;
    const daysInPrevMonthToShow = adjustedFirstDay - 1;
    const firstDateToShow = new Date(currentYear, currentMonth, 1 - daysInPrevMonthToShow);

    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

    for (let i = 0; i < daysInPrevMonthToShow; i++) {
      const emptyDay = document.createElement('div');
      emptyDay.classList.add('col', 'day', 'empty-day', 'text-muted');
      calendarElement.appendChild(emptyDay);
    }

    for (let day = 1; day <= daysInMonth; day++) {
      const dayElement = document.createElement('div');
      dayElement.classList.add('col', 'day');

      const eventosDelDia = <%= raw @events.to_json %>.filter(evento => evento.dia === day);
      if (eventosDelDia.length > 0) {
        dayElement.classList.add('has-events');

        const eventInfo = eventosDelDia.map(evento => `
          <strong>Dir:</strong> ${evento.direccion}<br>
          <strong>Mail:</strong> ${evento.mail}<br>
          <strong>Tel:</strong> ${evento.telefono}
        `).join('<br>');

        const buttons = <%= !user_signed_in? ? true : false %>;
        if (buttons) {
          const editPath = '<%= edit_vet_de_guardium_path('vet_id') %>';
          dayElement.innerHTML = `
            <span class="day-number">${day}</span><br>${eventInfo}
            <br>
            <a href="#" class="btn btn-secondary edit-button" style='margin: 2px' data-edit-path="${editPath.replace('vet_id', eventosDelDia[0].id)}" data-id="${eventosDelDia[0].id}">Editar</a>
            <button type="button" class="btn btn-danger" style='margin: 2px' data-bs-toggle="modal" data-bs-target="#ModalEliminar-${eventosDelDia[0].id}">Eliminar</button>`;
          
          // Crear el modal eliminar
          const deleteModal = createDeleteModal(eventosDelDia[0].id);
          calendarElement.appendChild(deleteModal);
        } else {
          dayElement.innerHTML = `<span class="day-number">${day}</span><br>${eventInfo}`;
        }
      } else {
        dayElement.innerHTML = `<span class="day-number">${day}</span>`;
      }

      if (day < currentDate.getDate()) {
        dayElement.classList.add('past-day');
      } else if (day === currentDate.getDate()) {
        dayElement.classList.add('current-day');
      } else {
        dayElement.classList.add('future-day');
      }

      calendarElement.appendChild(dayElement);
    }

    // Agregamos un evento de clic para manejar la navegación al editar
    calendarElement.addEventListener('click', function (event) {
      const editButton = event.target.closest('.edit-button');
      if (editButton) {
        const editPath = editButton.getAttribute('data-edit-path');
        Turbo.visit(editPath, { action: 'replace' });

        // Detenemos la propagación del evento para evitar conflictos
        event.preventDefault();
        event.stopPropagation();
      }

      // Agregamos un evento de clic para manejar la confirmación de eliminación
      const confirmButton = event.target.closest('.confirm-delete');
      if (confirmButton) {
        const eventId = confirmButton.getAttribute('data-event-id');
        console.log('Calling deleteEvent');
        deleteEvent(eventId);

        // Deshabilitar el botón después de confirmar para evitar clics adicionales
        confirmButton.setAttribute('disabled', 'true');

        // Cierra el modal después de hacer clic en "Confirmar"
        const modal = document.querySelector(`#ModalEliminar-${eventId}`);
        const modalInstance = bootstrap.Modal.getInstance(modal);
        modalInstance.hide();

        // Detenemos la propagación del evento para evitar conflictos
        event.preventDefault();
        event.stopImmediatePropagation();
      }
    });

    function createDeleteModal(eventId) {
  const modalContainer = document.createElement('div');
  modalContainer.innerHTML = `
    <div class="modal fade" id="ModalEliminar-${eventId}" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h1 class="modal-title fs-5" id="exampleModalLabel">Eliminar Evento</h1>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            ¿Desea eliminar el evento de forma permanente?
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-turqueza confirm-delete" style='margin: 2px' data-event-id="${eventId}">Confirmar</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Atrás</button>
          </div>
        </div>
      </div>
    </div>
  `;

  const modal = modalContainer.firstElementChild;

  // Agrega un evento de clic al botón de confirmación dentro del modal
  const confirmButton = modal.querySelector('.confirm-delete');
  confirmButton.addEventListener('click', function () {
    // Obtén el ID del evento desde el atributo data
    const eventId = confirmButton.getAttribute('data-event-id');
    // Deshabilita el botón para evitar clics adicionales
    confirmButton.setAttribute('disabled', 'true');
    // Llama a la función deleteEvent
    deleteEvent(eventId);
  });

  // Agrega un evento para limpiar el atributo "disabled" al cerrar el modal
  modal.addEventListener('hidden.bs.modal', function () {
    confirmButton.removeAttribute('disabled');
  });

  return modal;
}



    function deleteEvent(eventId) {
      console.log(`Deleting event with ID ${eventId}`);
      // Obtener el token CSRF de la etiqueta meta en el HTML generado por Rails
      const csrfToken = document.querySelector('meta[name="csrf-token"]').content;

      // Enviar una solicitud DELETE al servidor
      fetch(`/vet_de_guardia/${eventId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken,
        },
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        // Enviar una actualización de Turbo Frames para refrescar la interfaz de usuario
        Turbo.visit(window.location, { action: 'replace' });
        return response.json(); // Devolver la respuesta JSON si es necesario
      })
      .then(data => {
        // Puedes realizar acciones adicionales con la respuesta JSON si es necesario
        console.log('Delete successful:', data);
      })
      .catch(error => console.error('Error deleting event:', error));
    }
  });
</script>





  
  
  

<style>
    .past-day {
        background-color: #E0E0E0; /* Gris claro para días pasados */
        color: #616161; /* Texto gris oscuro */
    }

    .current-day {
        background-color: #FF914C; /* Naranja para el día actual */
        color: #fff; /* Texto blanco */
    }

    .future-day {
        background-color: #fff; /* Blanco para días futuros sin evento */
        color: #616161; /* Turquesa para días futuros sin evento */
    }

    .has-events {
        background-color: #0D9BB5; /* Turquesa para días futuros con evento */
        color: #fff; /* Texto blanco para días futuros con evento */
    }

    .day-of-week {
        background-color: #0D9BB5; /* Fondo turquesa para los nombres de los días */
        color: #fff; /* Texto gris oscuro para los nombres de los días */
        padding: 8px; /* Espaciado interno */
        font-weight: bold; /* Negrita */
        text-align: center; /* Centrar texto */
        border-bottom: 1px solid #ccc; /* Línea divisoria inferior */
    }

    .day {
        border: 1px solid #ccc; /* Borde del día */
        padding: 10px; /* Espaciado interno */
        text-align: left; /* Centrar texto */
        min-height: 100px; /* Altura mínima para asegurar uniformidad */
    }

    .empty-day {
        background-color: #E0E0E0; /* Gris claro para días del mes anterior y espacios vacíos */
        color: #616161; /* Texto gris oscuro */
    }

    .events {
        list-style: none; /* Eliminar viñetas de la lista */
        padding: 0; /* Eliminar espaciado interno de la lista */
        margin: 0; /* Eliminar margen externo de la lista */
    }

    .event {
        background-color: #0D9BB5; /* Turquesa para eventos */
        border: 1px solid #086A87; /* Borde más oscuro para eventos */
        margin-bottom: 5px; /* Espacio inferior entre eventos */
        padding: 8px; /* Espaciado interno */
    }

    .days-row {
        display: flex;
    }
</style>